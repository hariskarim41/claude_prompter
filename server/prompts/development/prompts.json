{
  "prompts": [
    {
      "id": "expert_code_implementation",
      "name": "Expert Code Implementation",
      "category": "development",
      "description": "Expert implementation of refined coding requirements with comprehensive explanation and best practices.",
      "file": "expert_code_implementation.md",
      "arguments": [
        {
          "name": "refined_query",
          "description": "The refined coding request",
          "required": true
        },
        {
          "name": "language",
          "description": "The programming language to use",
          "required": true
        },
        {
          "name": "requirements",
          "description": "The functional requirements",
          "required": true
        },
        {
          "name": "constraints",
          "description": "Any performance/security/quality considerations",
          "required": false
        }
      ],
      "gates": [
        "security-awareness",
        "code-quality",
        "technical-accuracy"
      ]
    },
    {
      "id": "code_review_optimization_chain",
      "name": "Comprehensive Code Review",
      "category": "development",
      "description": "Systematic 6-step code review covering structure, functionality, security, performance, optimization, and quality assurance",
      "file": "code_review_optimization_chain.md",
      "arguments": [
        {
          "name": "target_code",
          "description": "The code to be reviewed and optimized",
          "required": true
        },
        {
          "name": "language_framework",
          "description": "Programming language and framework being used",
          "required": true
        },
        {
          "name": "performance_goals",
          "description": "Specific performance targets or optimization goals",
          "required": false
        }
      ]
    },
    {
      "id": "detect_project_commands",
      "name": "Project Commands Detection",
      "category": "development",
      "description": "Intelligently detects and configures project validation commands (lint, test, build) for different project types with Enhanced CAGEERF integration",
      "file": "detect_project_commands.md",
      "arguments": [
        {
          "name": "project_path",
          "description": "Path to the project directory",
          "required": true
        },
        {
          "name": "project_type",
          "description": "Type of project (nodejs, rust, python, go, etc.)",
          "required": true
        }
      ]
    },
    {
      "id": "generate_comprehensive_claude_md",
      "name": "Comprehensive CLAUDE.md Generator",
      "category": "development",
      "description": "Generates comprehensive CLAUDE.md files with all 6 development criteria, Enhanced CAGEERF integration, and project-specific configurations",
      "file": "generate_comprehensive_claude_md.md",
      "arguments": [
        {
          "name": "project_path",
          "description": "Path to the project directory",
          "required": true
        },
        {
          "name": "project_name",
          "description": "Name of the project",
          "required": true
        },
        {
          "name": "project_type",
          "description": "Type of project",
          "required": true
        },
        {
          "name": "architecture_level",
          "description": "Architecture sophistication level 1-10",
          "required": true
        },
        {
          "name": "project_commands",
          "description": "JSON object with detected project commands",
          "required": true
        }
      ]
    },
    {
      "id": "analyze_file_structure",
      "name": "Analyze File Structure",
      "category": "development",
      "description": "Analyzes a file's structure to identify potential modules, dependencies, and organization patterns for refactoring.",
      "file": "analyze_file_structure.md",
      "arguments": [
        {
          "name": "code",
          "description": "The source code to analyze",
          "required": true
        },
        {
          "name": "language",
          "description": "Programming language of the code",
          "required": true
        },
        {
          "name": "file_path",
          "description": "Path to the file being analyzed",
          "required": true
        }
      ]
    },
    {
      "id": "create_modularization_plan",
      "name": "Create Modularization Plan",
      "category": "development",
      "description": "Creates a detailed plan for splitting a file into smaller, more maintainable modules based on analysis of its structure and dependencies.",
      "file": "create_modularization_plan.md",
      "arguments": [
        {
          "name": "language",
          "description": "Programming language of the code",
          "required": true
        },
        {
          "name": "file_path",
          "description": "Path to the file being modularized",
          "required": true
        },
        {
          "name": "analysis_results",
          "description": "Results from the file structure analysis",
          "required": true
        }
      ]
    },
    {
      "id": "transform_code_to_modules",
      "name": "Transform Code to Modules",
      "category": "development",
      "description": "Transforms a large file into multiple smaller module files according to a modularization plan, ensuring proper imports/exports and maintaining functionality.",
      "file": "transform_code_to_modules.md",
      "arguments": [
        {
          "name": "language",
          "description": "Programming language of the code",
          "required": true
        },
        {
          "name": "file_path",
          "description": "Path to the original file",
          "required": true
        },
        {
          "name": "original_code",
          "description": "The original source code to be modularized",
          "required": true
        },
        {
          "name": "modularization_plan",
          "description": "The detailed plan for how to split the code",
          "required": true
        }
      ]
    },
    {
      "id": "test_temporary_gates",
      "name": "Test Temporary Gates Implementation",
      "category": "development",
      "description": "Test prompt for validating the enhanced gate system with temporary gates. Demonstrates 5-level precedence, execution-scoped lifecycle management, and multiple gate types.",
      "file": "test-temporary-gates.md",
      "arguments": [
        {
          "name": "analysis_type",
          "description": "Type of analysis to perform (e.g., 'technical specification', 'architectural design', 'implementation plan')",
          "required": true
        },
        {
          "name": "topic",
          "description": "The main subject to analyze",
          "required": true
        },
        {
          "name": "content",
          "description": "The content or scenario to analyze",
          "required": true
        },
        {
          "name": "focus_area",
          "description": "Specific area to emphasize in the analysis",
          "required": true
        },
        {
          "name": "context",
          "description": "The broader context or use case for the analysis",
          "required": true
        }
      ],
      "gates": [
        "content-structure",
        "technical-accuracy"
      ]
    },
    {
      "id": "strategicImplement",
      "name": "Strategic Implementation",
      "category": "development",
      "description": "Systematically implement a plan phase with architectural alignment, compatibility checking, and progress tracking",
      "file": "strategicImplement.md",
      "arguments": [
        {
          "name": "plan_path",
          "type": "string",
          "description": "Path to the plan document to implement (e.g., plans/current/feature-plan.md)"
        },
        {
          "name": "phase_identifier",
          "type": "string",
          "description": "Specific phase to implement (e.g., 'Phase 1', 'Phase 2A', 'Step 3: Integration')"
        }
      ]
    },
    {
      "id": "component_flow_analysis",
      "name": "Component Flow Analysis",
      "category": "development",
      "description": "Comprehensive component review that tracks data flow, lifecycle, dependencies, and integration points",
      "file": "component_flow_analysis.md",
      "arguments": [
        {
          "name": "component_path",
          "type": "string",
          "description": "Path to the component file (e.g., src/components/UserProfile.tsx)"
        },
        {
          "name": "component_code",
          "type": "string",
          "description": "The complete component source code to analyze"
        },
        {
          "name": "framework",
          "type": "string",
          "description": "Framework being used (React, Vue, Angular, Svelte, etc.)"
        },
        {
          "name": "language",
          "type": "string",
          "description": "Programming language (JavaScript, TypeScript, etc.)"
        }
      ]
    }
  ]
}